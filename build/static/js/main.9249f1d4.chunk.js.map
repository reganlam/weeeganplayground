{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","reportWebVitals.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","Notification","message","className","baseUrl","axios","get","then","res","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","notesToShow","filter","map","i","console","log","find","n","changedNote","catch","err","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","e","target","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9249f1d4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n\tconst label = note.important ? \"make not important\" : \"make important\";\r\n\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t{note.content}\r\n\t\t\t<button onClick={toggleImportance}>{label}</button>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n\tif (message === null) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn <div className=\"error\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/notes\";\r\n\r\nconst getAll = () => {\r\n\tconst api = axios.get(baseUrl);\r\n\treturn api.then((res) => res.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n\tconst api = axios.post(baseUrl, newObject);\r\n\treturn api.then((res) => res.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n\tconst api = axios.put(`${baseUrl}/${id}`, newObject);\r\n\treturn api.then((res) => res.data);\r\n};\r\n\r\nexport default {\r\n\tgetAll,\r\n\tcreate,\r\n\tupdate,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport noteService from \"./services/notes\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((res) => {\n      setNotes(res);\n    });\n  }, []);\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1,\n    };\n\n    noteService.create(noteObject).then((res) => {\n      setNotes(notes.concat(res));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (e) => {\n    setNewNote(e.target.value);\n  };\n\n  const toggleImportanceOf = (id) => {\n    console.log(\"importance of \" + id + \" needs to be toggled\");\n\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((res) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : res)));\n      })\n      .catch((err) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => (\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}